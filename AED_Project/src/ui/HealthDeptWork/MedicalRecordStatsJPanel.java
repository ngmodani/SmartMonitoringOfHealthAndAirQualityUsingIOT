/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.HealthDeptWork;

import business.Enterprise.CityCommunities;
import business.Enterprise.Enterprise;
import business.Health.Disease;
import business.Network.Network;
import business.Organization.CommunityOrganization;
import business.Organization.DoctorOrganization;
import business.Organization.Organization;
import business.UserAccount.UserAccount;
import business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author raunak
 */
public class MedicalRecordStatsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise e;
    private Network n;
    private UserAccount userAccount;
    private DoctorOrganization docOrganization;
    private Date currDate;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public MedicalRecordStatsJPanel(JPanel userProcessContainer, Network n) {
        initComponents();

        this.userProcessContainer = userProcessContainer;

        //this.e = e;
        this.n = n;
        currDate = new Date();
        populateTable(currDate);

    }

    public void populateTable(Date date) {
        DefaultTableModel model = (DefaultTableModel) healthRecordsJTable.getModel();

        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        int countBreath = 0;
        int countChest = 0;
        int countFatigue = 0;
        int countHeadache = 0;
        //int docAssissts = 0;
        //int age = 0;
        //int population = 0;
        //int count = 0;
        model.setRowCount(0);

        for (Enterprise ep : n.getEnterpriseDirectory().getEnterpriseList()) {
            if (ep instanceof CityCommunities) {
                for (Organization o : ep.getOrganizationDirectory().getOrganizationList()) {
                    if (o instanceof CommunityOrganization) {

                        //population = o.getPopulation();
                        countBreath = 0;           //initializing count to 0 for each Community
                        countChest = 0;
                        countFatigue = 0;
                        countHeadache = 0;

                        for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {
                            for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                if (df.format(date).equals(df.format(wr.getRequestDate()))) {
                                    switch (wr.getMessage()) {
                                        case "Breathing issues":
                                            countBreath++;
                                            break;
                                        case "Chest Pain":
                                            countChest++;
                                            break;
                                        case "Fatigue or Weakness":
                                            countFatigue++;
                                            break;
                                        case "Headache":
                                            countHeadache++;
                                            break;
                                    }
                                }
                            }
                        }
                        if (countBreath > 0 || countChest > 0
                                || countFatigue > 0 || countHeadache > 0) {

                            Object[] row = new Object[5];
                            row[0] = o;
                            row[1] = countBreath;
                            row[2] = countChest;
                            row[3] = countFatigue;
                            row[4] = countHeadache;

                            model.addRow(row);
                        }
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        healthRecordsJTable = new javax.swing.JTable();
        btnGetData = new javax.swing.JButton();
        lblDay = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        btnGetHealthHistory = new javax.swing.JButton();
        backJButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(52, 169, 66));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        healthRecordsJTable.setBorder(new javax.swing.border.MatteBorder(null));
        healthRecordsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Community", "Breathing Issues", "Chest Pain", "Fatigue or Weakness", "Headache"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(healthRecordsJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 58, 630, 96));

        btnGetData.setBackground(new java.awt.Color(153, 153, 153));
        btnGetData.setFont(new java.awt.Font("Chalkduster", 1, 14)); // NOI18N
        btnGetData.setText("Get Data");
        btnGetData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDataActionPerformed(evt);
            }
        });
        add(btnGetData, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 210, -1, -1));

        lblDay.setBackground(new java.awt.Color(153, 153, 153));
        lblDay.setFont(new java.awt.Font("New Peninim MT", 1, 18)); // NOI18N
        lblDay.setText("Medical Records Statistics");
        add(lblDay, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        jDateChooser.setBackground(new java.awt.Color(153, 153, 153));
        add(jDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 200, -1));

        btnGetHealthHistory.setBackground(new java.awt.Color(153, 153, 153));
        btnGetHealthHistory.setFont(new java.awt.Font("Chalkduster", 1, 14)); // NOI18N
        btnGetHealthHistory.setText("Health History of Community");
        btnGetHealthHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetHealthHistoryActionPerformed(evt);
            }
        });
        add(btnGetHealthHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, -1, -1));

        backJButton3.setBackground(new java.awt.Color(153, 153, 153));
        backJButton3.setFont(new java.awt.Font("Chalkduster", 1, 14)); // NOI18N
        backJButton3.setText("<<Back");
        backJButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton3ActionPerformed(evt);
            }
        });
        add(backJButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDataActionPerformed

        Date selectedDate = jDateChooser.getDate();

        if (selectedDate == null) {
            JOptionPane.showMessageDialog(this, "Please select a Date!", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        populateTable(selectedDate);

    }//GEN-LAST:event_btnGetDataActionPerformed

    private void btnGetHealthHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetHealthHistoryActionPerformed
        // TODO add your handling code here:
        int selectedRow = healthRecordsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table!", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        CommunityOrganization org = (CommunityOrganization) healthRecordsJTable.getValueAt(selectedRow, 0);
        generateAgeDistributionPieChartOfCommunity(org);


    }//GEN-LAST:event_btnGetHealthHistoryActionPerformed

    private void backJButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton3ActionPerformed

    public void generateAgeDistributionPieChartOfCommunity(Organization org) {

        //pieDataset.setValue("", WIDTH);
        //DefaultCategoryDataset vitalSignDataset=new DefaultCategoryDataset();
        int countCancer = 0;
        int countAsthma = 0;
        int countCOPD = 0;
        int countHeart = 0;
        for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
            for (Disease d : ua.getResident().getHealthRecord().getHistory()) {
                switch (d.getDiseaseDescription()) {
                    case "Lung Cancer":
                        countCancer++;
                        break;
                    case "Asthma":
                        countAsthma++;
                        break;
                    case "Chronic obstructive pulmonary disorder":
                        countCOPD++;
                        break;
                    case "Heart related disease":
                        countHeart++;
                        break;
                }
            }

        }
        int total = countAsthma + countCOPD + countCancer + countHeart;
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("Lung Cancer: " + (countCancer * 100) / total + "%", new Integer(countCancer));
        pieDataset.setValue("Asthma: " + (countAsthma * 100) / total + "%", new Integer(countAsthma));
        pieDataset.setValue("COPD: " + (countCOPD * 100) / total + "%", new Integer(countCOPD));
        pieDataset.setValue("Heart Disease: " + (countHeart * 100) / total + "%", new Integer(countHeart));

        JFreeChart vitalSignChart = ChartFactory.createPieChart("Medical Records of " + org.getName(), pieDataset, true, true, true);
        PiePlot p = (PiePlot) vitalSignChart.getPlot();
        //p.setForegroundAlpha(TOP_ALIGNMENT);

        //JFreeChart vitalSignChart = ChartFactory.createBarChart3D("Vital Sign Chart", "Time Stamp", "Rate", vitalSignDataset, PlotOrientation.VERTICAL, true, false, false);
        //  vitalSignChart.setBackgroundPaint(Color.white);
        ChartFrame chartFrame = new ChartFrame(org.getName(), vitalSignChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(800, 800);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton2;
    private javax.swing.JButton backJButton3;
    private javax.swing.JButton btnGetData;
    private javax.swing.JButton btnGetHealthHistory;
    private javax.swing.JTable healthRecordsJTable;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDay;
    // End of variables declaration//GEN-END:variables
}
