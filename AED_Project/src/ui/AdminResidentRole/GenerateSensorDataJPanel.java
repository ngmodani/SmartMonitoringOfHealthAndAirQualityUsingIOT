/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.AdminResidentRole;

import business.Community.House;
import business.Organization.CommunityOrganization;
import business.Organization.Organization;
import business.Organization.OrganizationDirectory;
import business.Person.Person;
import business.Sensor.Sensor;
import business.Sensor.SensorData;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.MayorWorkArea.BroadcastMessageJPanel;

/**
 *
 * @author raunak
 */
public class GenerateSensorDataJPanel extends javax.swing.JPanel {

    private OrganizationDirectory organizationDir;
    private JPanel userProcessContainer;
    private DateFormat df;
    private Random r;

    /**
     * Creates new form ManageOrganizationJPanel
     */
    public GenerateSensorDataJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDir, Random r) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organizationDir = organizationDir;
        this.r = r;
        populateOrganizationComboBox();
        //populateOrganizationEmpComboBox();
        df = new SimpleDateFormat("yyyy-MM-dd");
    }

    public void populateOrganizationComboBox() {
        organizationJComboBox.removeAllItems();

        for (Organization organization : organizationDir.getOrganizationList()) {
            if (organization instanceof CommunityOrganization) {
                organizationJComboBox.addItem(organization);
            }
        }
    }

    

    private void populateTable(Organization o) {
        DefaultTableModel model = (DefaultTableModel) organizationJTable.getModel();
        df = new SimpleDateFormat("yyyy-MM-dd");
        model.setRowCount(0);
        Sensor s = o.getSensorList().getList().get(0);
        for (SensorData sd : s.getSensorDataRecord()) {
            if (sd.getTimestamp() != null) {
                Object[] row = new Object[2];
                row[0] = o.getName();
                row[1] = df.format(sd.getTimestamp());
                model.addRow(row);
                //break;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        organizationJTable = new javax.swing.JTable();
        addJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        organizationJComboBox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(0, 204, 204));

        organizationJTable.setBorder(new javax.swing.border.MatteBorder(null));
        organizationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Community", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(organizationJTable);

        addJButton.setBackground(new java.awt.Color(153, 153, 153));
        addJButton.setFont(new java.awt.Font("Chalkduster", 1, 14)); // NOI18N
        addJButton.setText("Generate Data");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(153, 153, 153));
        backJButton.setFont(new java.awt.Font("Chalkduster", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jDateChooser1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel4.setFont(new java.awt.Font("New Peninim MT", 1, 18)); // NOI18N
        jLabel4.setText("Generate Sensor Data");

        jLabel5.setFont(new java.awt.Font("New Peninim MT", 1, 14)); // NOI18N
        jLabel5.setText("Community");

        organizationJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        organizationJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(32, 32, 32)
                                .addComponent(organizationJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(addJButton)))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(organizationJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addJButton))
                .addGap(52, 52, 52)
                .addComponent(backJButton)
                .addGap(48, 48, 48))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed

        Organization organization = (Organization) organizationJComboBox.getSelectedItem();
        if (organization == null) {
            JOptionPane.showMessageDialog(null, "Please add Community!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Date date = jDateChooser1.getDate();
        for (Sensor s : organization.getSensorList().getList()) {
            for (SensorData sd : s.getSensorDataRecord()) {
                if (df.format(date).equals(df.format(sd.getTimestamp()))) {
                    JOptionPane.showMessageDialog(null, "Data Already Exist for Selected Date! Please Choose another Date.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

        //for (int i = 0; i < organization.getSensorList().getList().size(); i++) {
        for (Sensor s : organization.getSensorList().getList()) {
            SensorData sd = s.addSendorData();
            sd.setAirQualityIndex(r.nextInt(r.nextInt(310)));
            sd.setCarbonMonooxide(r.nextInt(r.nextInt(100)));
            sd.setTimestamp(date);
            //}
        }
        for (House h : organization.getHouseList().getList()) {
            //Random rh = new Random();
            SensorData sdh = h.getSensor().addSendorData();
            sdh.setAirQualityIndex(r.nextInt(r.nextInt(310)));
            sdh.setCarbonMonooxide(r.nextInt(r.nextInt(100)));
            sdh.setTimestamp(date);
            if (sdh.getCarbonMonooxide() > 80) {
                try {
                    ArrayList<String> recipients = new ArrayList<>();
                    int count = 0;
                    for (Person p : organization.getPersonDirectory().getPersonList()) {
                        if (p != null) {
                            if (p.getHouse().equals(h)) {
                                if (p.geteMailID() != null) {
                                    recipients.add(p.geteMailID());
                                    count++;
                                }
                            }
                        }
                    }
                    if (count > 0) {
                        javax.mail.internet.InternetAddress[] addressTo = new javax.mail.internet.InternetAddress[recipients.size()];

                        for (int i = 0; i < recipients.size(); i++) {
                            try {
                                addressTo[i] = new javax.mail.internet.InternetAddress(recipients.get(i));
                            } catch (AddressException ex) {
                                Logger.getLogger(BroadcastMessageJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        Properties props = new Properties();

                        props.put("mail.smtp.host", "smtp.gmail.com"); //SMTP Host
                        props.put("mail.smtp.port", "587"); //TLS Port
                        props.put("mail.smtp.auth", "true"); //enable authentication
                        props.put("mail.smtp.starttls.enable", "true"); //enable STARTTLS

                        Session session = Session.getDefaultInstance(props,
                                new javax.mail.Authenticator() {
                                    protected PasswordAuthentication getPasswordAuthentication() {
                                        return new PasswordAuthentication("ngaedproject2015@gmail.com", "ngaedproject");
                                    }
                                });

                        try {
                            Message message = new MimeMessage(session);
                            message.setFrom(new InternetAddress("ngaedproject2015@gmail.com"));
                            message.addRecipients(Message.RecipientType.TO, addressTo);
                            message.setSubject("ALERT: High CO Level!");
                            message.setText("CO Level in your House is High! Please Take Care!");
                            Transport.send(message);
                            //JOptionPane.showMessageDialog(null, "Message sent!");
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_addJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void organizationJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBoxActionPerformed
        // TODO add your handling code here:
        Organization organization = (Organization) organizationJComboBox.getSelectedItem();
        if (organization != null) {
            populateTable(organization);
        }
    }//GEN-LAST:event_organizationJComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backJButton;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JTable organizationJTable;
    // End of variables declaration//GEN-END:variables
}
